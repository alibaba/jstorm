#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from JstormAM import JstormAM
from JstormAM.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  string info()')
  print('  void stopAppMaster()')
  print('  void startNimbus(i32 number, i32 container_memory, i32 container_vcorecount)')
  print('  void stopNimbus()')
  print('  void removeNimbus(i32 number)')
  print('  void removeSpecNimbus(string container_id)')
  print('  void addSupervisors(i32 number, i32 container_memory, i32 container_vcorecount)')
  print('  void addSpecSupervisor(i32 number, i32 container_memory, i32 container_vcorecount,  racks,  hosts)')
  print('  void startSpecNimbus(i32 number, i32 container_memory, i32 container_vcorecount,  racks,  hosts)')
  print('  void startSupervisors()')
  print('  void stopSupervisors()')
  print('  void removeSupervisors(i32 number)')
  print('  void removeSpecSupervisors(string container_id)')
  print('  void upgradeCluster()')
  print('  void shutdown()')
  print('  string getConfig()')
  print('  void setConfig(string key, string value)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = JstormAM.Client(protocol)
transport.open()

if cmd == 'info':
  if len(args) != 0:
    print('info requires 0 args')
    sys.exit(1)
  pp.pprint(client.info())

elif cmd == 'stopAppMaster':
  if len(args) != 0:
    print('stopAppMaster requires 0 args')
    sys.exit(1)
  pp.pprint(client.stopAppMaster())

elif cmd == 'startNimbus':
  if len(args) != 3:
    print('startNimbus requires 3 args')
    sys.exit(1)
  pp.pprint(client.startNimbus(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'stopNimbus':
  if len(args) != 0:
    print('stopNimbus requires 0 args')
    sys.exit(1)
  pp.pprint(client.stopNimbus())

elif cmd == 'removeNimbus':
  if len(args) != 1:
    print('removeNimbus requires 1 args')
    sys.exit(1)
  pp.pprint(client.removeNimbus(eval(args[0]),))

elif cmd == 'removeSpecNimbus':
  if len(args) != 1:
    print('removeSpecNimbus requires 1 args')
    sys.exit(1)
  pp.pprint(client.removeSpecNimbus(args[0],))

elif cmd == 'addSupervisors':
  if len(args) != 3:
    print('addSupervisors requires 3 args')
    sys.exit(1)
  pp.pprint(client.addSupervisors(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'addSpecSupervisor':
  if len(args) != 5:
    print('addSpecSupervisor requires 5 args')
    sys.exit(1)
  pp.pprint(client.addSpecSupervisor(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'startSpecNimbus':
  if len(args) != 5:
    print('startSpecNimbus requires 5 args')
    sys.exit(1)
  pp.pprint(client.startSpecNimbus(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'startSupervisors':
  if len(args) != 0:
    print('startSupervisors requires 0 args')
    sys.exit(1)
  pp.pprint(client.startSupervisors())

elif cmd == 'stopSupervisors':
  if len(args) != 0:
    print('stopSupervisors requires 0 args')
    sys.exit(1)
  pp.pprint(client.stopSupervisors())

elif cmd == 'removeSupervisors':
  if len(args) != 1:
    print('removeSupervisors requires 1 args')
    sys.exit(1)
  pp.pprint(client.removeSupervisors(eval(args[0]),))

elif cmd == 'removeSpecSupervisors':
  if len(args) != 1:
    print('removeSpecSupervisors requires 1 args')
    sys.exit(1)
  pp.pprint(client.removeSpecSupervisors(args[0],))

elif cmd == 'upgradeCluster':
  if len(args) != 0:
    print('upgradeCluster requires 0 args')
    sys.exit(1)
  pp.pprint(client.upgradeCluster())

elif cmd == 'shutdown':
  if len(args) != 0:
    print('shutdown requires 0 args')
    sys.exit(1)
  pp.pprint(client.shutdown())

elif cmd == 'getConfig':
  if len(args) != 0:
    print('getConfig requires 0 args')
    sys.exit(1)
  pp.pprint(client.getConfig())

elif cmd == 'setConfig':
  if len(args) != 2:
    print('setConfig requires 2 args')
    sys.exit(1)
  pp.pprint(client.setConfig(args[0],args[1],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
